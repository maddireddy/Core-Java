List:

A List is an ordered collection of elements
It may contain duplicate
The indexing of the elements is similar to Array. The first index of List is zero.
The elements can be manipulated based on their indexed positions
Common List implementations are ArrayList and LinkedList

ArrayList

The ArrayList class extends AbstractList and implements the List interface.
ArrayList supports dynamic arrays that can grow as needed.
Array lists are created with an initial size.
When this size is exceeded, the collection is automatically enlarged.
When objects are removed, the array may be shrunk.

Syntax:
To create an ArrayList:

import java.util.ArrayList;
// ...
ArrayList<String> cars = new ArrayList<String>();

Adding Elements:
Use the add() method:

cars.add("Volvo");
cars.add("BMW");
cars.add("Ford");
cars.add("Mazda");

Accessing Elements:
Use the get() method:
String firstCar = cars.get(0); // "Volvo"

Modifying Elements:
Use the set() method:
cars.set(0, "Opel");

Removing Elements:
Use the remove() method:
cars.remove(0); // Removes the first element

Size:
To get the number of elements:
int size = cars.size(); // Returns 3 (after removal)

Looping Through:
Use a for loop or a for-each loop:

for (String car : cars) {
    System.out.println(car);
}

------------------------------

ArrayList:
----------

Internal Structure: ArrayList uses a dynamic array to store elements.

Advantages:
    Supports random access (fast retrieval by index).
    Good for storing and accessing data.
    Implements the List interface.

Disadvantages:
    Slower for insertions and deletions (requires shifting elements).
    Inefficient memory utilization.

LinkedList:
-------------
Internal Structure: LinkedList uses a doubly linked list to store elements.

Advantages:
    Faster for insertions and deletions (no shifting, just link changes).
    Good for manipulating data.
    Implements both List and Deque interfaces.

Disadvantages:
    Slower for random access (traversing nodes).

--------------------------------------
Linked lists handle insertions and deletions efficiently due to their inherent structure. Hereâ€™s how:

Dynamic Structure:
    A linked list consists of a series of nodes, where each node contains data and a reference (or pointer) to the next node.
Unlike arrays, linked list nodes are not stored contiguously in memory.

Insertions:
-----------

Beginning: Inserting at the start of a linked list takes constant time (O(1)).
Simply create a new node and update pointers.
Middle/End: Inserting elsewhere requires traversing the list (O(n)), but the actual insertion is still O(1).

Deletions:
---------
Beginning: Deleting from the start is O(1).
Middle/End: Deleting elsewhere requires traversal (O(n)), but the actual deletion is O(1).

Advantage:
---------
Linked lists allow efficient insertion and removal from any position.
No need to shift elements (unlike arrays).
